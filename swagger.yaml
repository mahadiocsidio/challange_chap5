openapi: 3.0.3
info:
  title: Basic Banking Systems
  description: |-
    Aplikasi ini akan berguna untuk membantu clients mendapatkan informasi tentang bagaimana project ini berjalan.
  contact:
    email: mahadiocsidio@students.amikom.com
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
tags:
  - name: User
    description: Operations related to users
  - name: Bank_Accounts
    description: Operations related to account
  - name: Transaction
    description: Operations related to transactions
  - name: Authentication
    description: Operations related to authentication
paths:
  /users:
    post:
      tags:
        - User
      operationId: post-create-new-user
      summary: Create a new user
      description: Creates a new user with the provided information.
      requestBody:
        $ref: "#/components/requestBodies/CreateUser"
      responses:
        "201":
          description: User Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/UserModel"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/UnauthorizedResponse'
    get:
      tags:
        - User
      operationId: get-fetch-all-user
      summary: Get all users
      description: Retrieves a list of all registered users.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: "#/components/schemas/UserModel"
  "/users/{userId}":
    get:
      tags:
        - User
      operationId: get-fetch-user-detail
      summary: Get user details
      description: Retrieves details of a specific user.
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: The ID of the user to retrieve.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/UserModelDetailed"
    put:
      tags:
        - User
      operationId: put-update-user
      summary: Update user details
      description: Updates details of a specific user.
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: The ID of the user to update.
      responses:
        "200":
          description: Successful user update
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/UnauthorizedResponse'
  /accounts:
    post:
      tags:
        - Bank_Accounts
      operationId: post-create-new-account
      summary: Create a new account
      description: Creates a new account with the provided information.
      requestBody:
        $ref: "#/components/requestBodies/CreateAccounts"
      responses:
        "201":
          description: Successful account creation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/AccountModel"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/UnauthorizedResponse'
    get:
      tags:
        - Bank_Accounts
      operationId: get-fetch-all-bank-accounts
      summary: Get all Bank Accounts
      description: Retrieves a list of all registered accounts.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: "#/components/schemas/AccountModel"
  "/accounts/{userId}":
    get:
      tags:
        - Bank_Accounts
      operationId: get-fetch-bank-account-detail
      summary: Get account details
      description: Retrieves details of a specific accounts.
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: The ID of the user to retrieve.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/AccountModelDetailed"
  /transaction:
    post:
      tags:
        - Transaction
      operationId: post-create-new-transaction
      summary: Create a new transaction
      description: Creates a new transaction with the provided information.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                source_account_id:
                  type: integer
                  example: 1
                destination_account_id:
                  type: integer
                  example: 2
                amount:
                  type: integer
                  example: 100000
      responses:
        "201":
          description: Successful transaction creation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/TransactionModel"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/UnauthorizedResponse'
    get:
      tags:
        - Transaction
      operationId: get-fetch-all-transaction
      summary: Get all transaction
      description: Retrieves a list of all registered transaction.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: "#/components/schemas/TransactionModel"
  "/transaction/{Id}":
    get:
      tags:
        - Transaction
      operationId: get-fetch-transaction-detail
      summary: Get transaction details
      description: Retrieves details of a specific transaction.
      parameters:
        - in: path
          name: Id
          schema:
            type: integer
          required: true
          description: The ID of the transaction to retrieve.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/TransactionModel"
  /auth/register:
    post:
      tags:
        - Authentication
      operationId: register
      summary: Register a new user
      requestBody:
        $ref: '#/components/requestBodies/CreateUser'
      responses:
        '201':
          description: Successfull operation
        '400':
          description: Failed operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/UnauthorizedResponse'
  /auth/login:
    post:
      tags:
        - Authentication
      operationId: login
      summary: Login a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'bujang@mail.com'
                password:
                  type: string
                  example: 'examplepassword'
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'
        '400':
          description: Failed operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BadRequestResponse'
  /auth/authenticate:
    get:
      tags:
        - Authentication
      operationId: authenticate
      summary: Authenticate a user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/UserModel'
                          - type: object
                          - properties:
                              profile:
                                $ref: '#/components/schemas/ProfileModel'

        '400':
          description: Failed operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/UnauthorizedResponse'
components:
  schemas:
    BasicResponse:
      title: BasicResponse
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "success"
    BadRequestResponse:
      title: BadRequestResponse
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: 'some error from user'
        data:
          example: null
    UnauthorizedResponse:
      title: UnauthorizedResponse
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: 'Unauthorized'
        data:
          example: null
    UserModel:
      title: User
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "blok"
        email:
          type: string
          example: "test125@gmail.com"
        password:
          type: string
          example: "pass1234"
    UserModelDetailed:
      title: Detailed User
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "blok"
        email:
          type: string
          example: "test125@gmail.com"
        profile:
          properties:
            id:
              type: integer
              example: 1
            user_id:
              type: integer
              example: 1
            identity_type:
              type: string
              example: "No_HP"
            identity_number:
              type: string
              example: "081234567890"
            address:
              type: string
              example: null
            created_at:
              type: string
              example: "2021-08-10T08:00:00.000Z"
            updated_at:
              type: string
              example: "2021-08-10T08:00:00.000Z"
    AccountModel:
      title: Account
      type: object
      properties:
        id:
          type: integer
          example: 1
        bank_name:
          type: string
          example: "Mandiri"
        bank_account_number:
          type: string
          example: "081929182741332"
        balance:
          type: integer
          example: 100000
        created_at:
          type: string
          example: "2021-08-10T08:00:00.000Z"
        updated_at:
          type: string
          example: "2021-08-10T08:00:00.000Z"
    ProfileModel:
      title: Profile
      type: object
      properties:
        identity_type:
          type: string
          example: 'NO HP'
        identity_number:
          type: string
          example: '08123456789'
        address:
          type: string
          example: 'jogja'
    AccountModelDetailed:
      title: Detailed Account
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        bank_name:
          type: string
          example: "Mandiri"
        bank_account_number:
          type: string
          example: "081929182741332"
        balance:
          type: integer
          example: 100000
        created_at:
          type: string
          example: "2021-08-10T08:00:00.000Z"
        updated_at:
          type: string
          example: "2021-08-10T08:00:00.000Z"
        history:
          type: object
          properties:
            sender:
              type: array
              example: []
            receive:
              type: array
              example: []
        user:
          type: object
          properties:
            name:
              type: string
              example: "blok"
            email:
              type: string
              example: test123@gmail.com
    TransactionModel:
      title: Transaction
      type: object
      properties:
        id:
          type: integer
          example: 1
        source_account_id:
          type: integer
          example: 1
        destination_account_id:
          type: integer
          example: 2
        amount:
          type: integer
          example: 100000
        created_at:
          type: string
          example: "2021-08-10T08:00:00.000Z"
        updated_at:
          type: string
          example: "2021-08-10T08:00:00.000Z"
  requestBodies:
    CreateUser:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: "blok"
              email:
                type: string
                example: "test125@gmail.com"
              password:
                type: string
                example: "pass1234"
              identity_type:
                type: string
                example: "No_HP"
              identity_number:
                type: string
                example: "081234567890"
    CreateAccounts:
      content:
        application/json:
          schema:
            type: object
            properties:
              bank_name:
                type: string
                example: "Mandiri"
              bank_account_number:
                type: string
                example: "081929182741332"
              balance:
                type: integer
                example: 100000
